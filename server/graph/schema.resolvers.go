package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/VidroX/furry-nebula/graph/model"
	"github.com/VidroX/furry-nebula/services/translator"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.UserWithToken, error) {
	gCtx := GetGinContext(ctx)
	userService := gCtx.GetServices().UserService

	user, err := userService.Login(email, password)

	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return user, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	gCtx := GetGinContext(ctx)
	user, err := gCtx.RequireUser()

	if err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return user, nil
}

// Role is the resolver for the role field.
func (r *userResolver) Role(ctx context.Context, obj *model.User) (model.Role, error) {
	gCtx := GetGinContext(ctx)
	role := model.Role(obj.RoleName)

	var err error
	if !role.IsValid() {
		err = fmt.Errorf(translator.WithKey(translator.KeysInternalError).Translate(gCtx.GetLocalizer()))
	}

	return role, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
