directive @isAuthenticated on FIELD_DEFINITION
directive @noUserOnly on FIELD_DEFINITION
directive @hasRole(role: Role!) on FIELD_DEFINITION
directive @approvedUserOnly on FIELD_DEFINITION

enum Role {
    Admin
    Shelter
    User
}

enum RegistrationRole {
    Shelter
    User
}

type ResponseMessage {
  message: String!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  role: Role!
  email: String!
  about: String!
  isApproved: Boolean!
}

input UserRegistrationInput {
  firstName: String!
  lastName: String!
  email: String!
  about: String
  password: String!
  role: RegistrationRole
}

enum TokenType {
  Access
  Refresh
}

type Token {
  type: TokenType!
  token: String!
}

type UserWithToken {
  message: String!
  user: User
  accessToken: Token
  refreshToken: Token
}

type Query {
  user: User! @isAuthenticated
}

type Mutation {
  login(email: String!, password: String!): UserWithToken! @noUserOnly
  register(userInfo: UserRegistrationInput!): UserWithToken! @noUserOnly
  changeUserApprovalStatus(userId: ID!, isApproved: Boolean!): ResponseMessage! @hasRole(role: Admin)
}
