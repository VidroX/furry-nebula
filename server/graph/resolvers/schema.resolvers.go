package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"

	"github.com/VidroX/furry-nebula/graph"
	"github.com/VidroX/furry-nebula/graph/model"
)

// RefreshAccessToken is the resolver for the refreshAccessToken field.
func (r *mutationResolver) RefreshAccessToken(ctx context.Context) (*model.Token, error) {
	gCtx := graph.GetGinContext(ctx)
	user, err := gCtx.RequireUser(model.TokenTypeRefresh)

	if err != nil {
		return nil, graph.FormatError(gCtx.GetLocalizer(), err)
	}

	token, err := gCtx.GetServices().UserService.CreateAccessToken(user)

	if err != nil {
		return nil, graph.FormatError(gCtx.GetLocalizer(), err)
	}

	return token, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
