"""
Animal types
"""
enum Animal {
    Cat
    Dog
    Rabbit
    Bird
}

"""
User request type
"""
enum UserRequestType {
  Accommodation
  Adoption
}

"""
User request status
"""
enum UserRequestStatus {
  Pending
  Approved
  Denied
  Fulfilled
  Cancelled
}

"""
User added animal shelter
"""
type Shelter {
  id: ID!
  representativeUser: User!
  name: String!
  address: String!
  info: String!
  photo: String
}

"""
Shelter animal
"""
type ShelterAnimal {
  id: ID!
  shelter: Shelter!
  animal: Animal!
  name: String!
  description: String!
  photo: String
  overallRating: Float!
  userRating: Float
}

"""
User request
"""
type UserRequest {
  id: ID!
  user: User!
  approvedBy: User
  animal: ShelterAnimal!
  requestStatus: UserRequestStatus!
  fromDate: Time
  toDate: Time
  requestType: UserRequestType!
}

"""
Filters for the shelter animals list
"""
input AnimalFilters {
  shelterId: ID
  shelterIds: [ID!]
  animal: Animal
  showUnavailable: Boolean
}

"""
Shelter list filters
"""
input ShelterFilters {
  showOnlyOwnShelters: Boolean @hasRole(role: Shelter)
}

"""
User request filters
"""
input UserRequestFilters {
  requestType: UserRequestType
  showOwnRequests: Boolean @hasRole(role: Shelter)
  isApproved: Boolean
  isDenied: Boolean
  isPending: Boolean
  isFulfilled: Boolean
  isCancelled: Boolean
}

"""
Shelter list connection
"""
type ShelterConnection {
  node: [Shelter!]!
  pageInfo: PageInfo!
}

"""
Accommodation Requests list connection
"""
type ShelterAnimalConnection {
  node: [ShelterAnimal!]!
  pageInfo: PageInfo!
}

"""
User request connection
"""
type UserRequestConnection {
  node: [UserRequest!]!
  pageInfo: PageInfo!
}

"""
Animal shelter creation input
"""
input ShelterInput {
  name: String!
  address: String!
  info: String
}

"""
Shelter animal creation input
"""
input ShelterAnimalInput {
  shelterId: ID!
  animal: Animal!
  name: String!
  description: String
}

"""
User request input
"""
input UserRequestInput {
  animalId: ID!
  requestType: UserRequestType!
  fromDate: Time
  toDate: Time
}

extend type Query {
  """
  Get the list of shelters added by shelter representatives. Authenticated user is required.
  """
  shelters(filters: ShelterFilters, pagination: Pagination): ShelterConnection! @isAuthenticated

  """
  Get the list of animals in shelters. Authenticated user is required.
  """
  shelterAnimals(filters: AnimalFilters, pagination: Pagination): ShelterAnimalConnection! @isAuthenticated

  """
  Get animal shelter by its id. Authenticated user is required.
  """
  shelter(id: ID!): Shelter! @isAuthenticated

  """
  Get shelter animal by its id. Authenticated user is required.
  """
  shelterAnimal(id: ID!): ShelterAnimal! @isAuthenticated

  """
  Get user accommodation/adoption requests. Authenticated user is required.
  """
  userRequests(filters: UserRequestFilters, pagination: Pagination): UserRequestConnection! @isAuthenticated
}

extend type Mutation {
  """
  Add shelter. User with Shelter role is required.
  """
  addShelter(data: ShelterInput!, photo: Upload): Shelter! @hasRole(role: Shelter)

  """
  Add animal to the shelter. User with Shelter role is required.
  """
  addShelterAnimal(data: ShelterAnimalInput!, photo: Upload): ShelterAnimal! @hasRole(role: Shelter)

  """
  Delete shelter. All animals inside will be removed automatically. User with Shelter role is required.
  """
  deleteShelter(id: ID!): ResponseMessage! @hasRole(role: Shelter)

  """
  Remove animal from the shelter list. User with Shelter role is required.
  """
  removeAnimal(id: ID!): ResponseMessage! @hasRole(role: Shelter)

  """
  Update animal rating. Authenticated user is required.
  """
  updateAnimalRating(id: ID!, rating: Float!): ShelterAnimal! @isAuthenticated

  """
  Create user accommodation/adoption request. Authenticated user is required.
  """
  createUserRequest(data: UserRequestInput!): UserRequest! @isAuthenticated

  """
  Change user request status. User with Shelter role is required.
  """
  changeUserRequestStatus(id: ID!, status: UserRequestStatus!): ResponseMessage! @hasRole(role: Shelter)

  """
  Cancel user request. Authenticated user is required.
  """
  cancelUserRequest(id: ID!): ResponseMessage! @isAuthenticated
}
