# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

directive @approvedUserOnly on FIELD_DEFINITION

directive @hasRole(approvedOnly: Boolean, role: Role!) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @isAuthenticated on FIELD_DEFINITION

directive @noUserOnly on FIELD_DEFINITION

directive @refreshTokenOnly on FIELD_DEFINITION

type Mutation {
    "Add shelter. User with Shelter role is required."
    addShelter(data: ShelterInput!, photo: Upload): Shelter!
    "Add animal to the shelter. User with Shelter role is required."
    addShelterAnimal(data: ShelterAnimalInput!, photo: Upload): ShelterAnimal!
    "Cancel user request. Authenticated user is required."
    cancelUserRequest(id: ID!): ResponseMessage!
    "Change approval status of user by id. Admin user is required."
    changeUserApprovalStatus(isApproved: Boolean!, userId: ID!): ResponseMessage!
    "Change user request status. User with Shelter role is required."
    changeUserRequestStatus(id: ID!, status: UserRequestStatus!): ResponseMessage!
    "Create user accommodation/adoption request. Authenticated user is required."
    createUserRequest(data: UserRequestInput!): UserRequest!
    "Delete shelter. All animals inside will be removed automatically. User with Shelter role is required."
    deleteShelter(id: ID!): ResponseMessage!
    "User login. Unauthenticated user only."
    login(email: String!, password: String!): UserWithToken!
    "Refresh access token though refresh token provided inside Authorization header"
    refreshAccessToken: Token!
    "User registration. Unauthenticated user only."
    register(userInfo: UserRegistrationInput!): UserWithToken!
    "Remove animal from the shelter list. User with Shelter role is required."
    removeAnimal(id: ID!): ResponseMessage!
    "Update animal rating. Authenticated user is required."
    updateAnimalRating(id: ID!, rating: Float!): ShelterAnimal!
    "Update current user's FCM token. Authenticated user is required."
    updateFCMToken(token: String!): User!
}

"Page information"
type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    page: Int!
    resultsPerPage: Int!
    totalResults: Int64!
}

type Query {
    "Get animal shelter by its id. Authenticated user is required."
    shelter(id: ID!): Shelter!
    "Get shelter animal by its id. Authenticated user is required."
    shelterAnimal(id: ID!): ShelterAnimal!
    "Get the list of animals in shelters. Authenticated user is required."
    shelterAnimals(filters: AnimalFilters, pagination: Pagination): ShelterAnimalConnection!
    "Get the list of shelters added by shelter representatives. Authenticated user is required."
    shelters(filters: ShelterFilters, pagination: Pagination): ShelterConnection!
    "Get currently authenticated user info"
    user: User!
    "Get the list of user approvals. Admin user is required."
    userApprovals(filters: ApprovalFilters, pagination: Pagination): UserApprovalsConnection!
    "Get user accommodation/adoption requests. Authenticated user is required."
    userRequests(filters: UserRequestFilters, pagination: Pagination): UserRequestConnection!
    "Get the list of all users. Admin user is required."
    users(pagination: Pagination): UsersConnection!
}

"Simple response with message"
type ResponseMessage {
    message: String!
}

"User added animal shelter"
type Shelter {
    address: String!
    id: ID!
    info: String!
    name: String!
    photo: String
    representativeUser: User!
}

"Shelter animal"
type ShelterAnimal {
    animal: Animal!
    description: String!
    id: ID!
    name: String!
    overallRating: Float!
    photo: String
    shelter: Shelter!
    userRating: Float
}

"Accommodation Requests list connection"
type ShelterAnimalConnection {
    node: [ShelterAnimal!]!
    pageInfo: PageInfo!
}

"Shelter list connection"
type ShelterConnection {
    node: [Shelter!]!
    pageInfo: PageInfo!
}

"Auth token"
type Token {
    token: String!
    type: TokenType!
}

"User model"
type User {
    about: String!
    birthday: Time!
    email: String!
    fcmToken: String
    firstName: String!
    id: ID!
    isApproved: Boolean!
    lastName: String!
    role: Role!
}

"User approvals connection"
type UserApprovalsConnection {
    node: [User]!
    pageInfo: PageInfo!
}

"User request"
type UserRequest {
    animal: ShelterAnimal!
    approvedBy: User
    fromDate: Time
    id: ID!
    requestStatus: UserRequestStatus!
    requestType: UserRequestType!
    toDate: Time
    user: User!
}

"User request connection"
type UserRequestConnection {
    node: [UserRequest!]!
    pageInfo: PageInfo!
}

"Messaged response with User and its auth tokens"
type UserWithToken {
    accessToken: Token
    message: String!
    refreshToken: Token
    user: User
}

"Users list connection"
type UsersConnection {
    node: [User]!
    pageInfo: PageInfo!
}

"Animal types"
enum Animal {
    Bird
    Cat
    Dog
    Rabbit
}

"Limited user roles for registration"
enum RegistrationRole {
    Shelter
    User
}

"User Roles"
enum Role {
    Admin
    Shelter
    User
}

"Auth token types"
enum TokenType {
    Access
    Refresh
}

"User request status"
enum UserRequestStatus {
    Approved
    Cancelled
    Denied
    Fulfilled
    Pending
}

"User request type"
enum UserRequestType {
    Accommodation
    Adoption
}

"Int64 scalar"
scalar Int64

"Time scalar"
scalar Time

"Upload scalar"
scalar Upload

"Filters for the shelter animals list"
input AnimalFilters {
    animal: Animal
    shelterId: ID
    shelterIds: [ID!]
    showUnavailable: Boolean
}

"Filters for list of user approvals"
input ApprovalFilters {
    isApproved: Boolean
    isReviewed: Boolean
}

"Pagination filters"
input Pagination {
    page: Int
    resultsPerPage: Int
}

"Shelter animal creation input"
input ShelterAnimalInput {
    animal: Animal!
    description: String
    name: String!
    shelterId: ID!
}

"Shelter list filters"
input ShelterFilters {
    showOnlyOwnShelters: Boolean
}

"Animal shelter creation input"
input ShelterInput {
    address: String!
    info: String
    name: String!
}

"Registration input data for User"
input UserRegistrationInput {
    about: String
    birthday: Time!
    email: String!
    firstName: String!
    lastName: String!
    password: String!
    role: RegistrationRole
}

"User request filters"
input UserRequestFilters {
    isApproved: Boolean
    isCancelled: Boolean
    isDenied: Boolean
    isFulfilled: Boolean
    isPending: Boolean
    requestType: UserRequestType
    showOwnRequests: Boolean
}

"User request input"
input UserRequestInput {
    animalId: ID!
    fromDate: Time
    requestType: UserRequestType!
    toDate: Time
}
